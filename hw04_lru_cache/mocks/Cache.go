// Code generated by mockery v2.39.0. DO NOT EDIT.

package mocks

import (
	hw04lrucache "github.com/khaydarov/otus-golang-professional/hw04_lru_cache"
	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Clear provides a mock function with given fields:
func (_m *Cache) Clear() {
	_m.Called()
}

// Get provides a mock function with given fields: key
func (_m *Cache) Get(key hw04lrucache.Key) (interface{}, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(hw04lrucache.Key) (interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(hw04lrucache.Key) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(hw04lrucache.Key) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, value
func (_m *Cache) Set(key hw04lrucache.Key, value interface{}) bool {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(hw04lrucache.Key, interface{}) bool); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
