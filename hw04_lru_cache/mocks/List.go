// Code generated by mockery v2.39.0. DO NOT EDIT.

package mocks

import (
	hw04lrucache "github.com/khaydarovm/otus-golang-professional/hw04_lru_cache"
	mock "github.com/stretchr/testify/mock"
)

// List is an autogenerated mock type for the List type
type List struct {
	mock.Mock
}

// Back provides a mock function with given fields:
func (_m *List) Back() *hw04lrucache.ListItem {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Back")
	}

	var r0 *hw04lrucache.ListItem
	if rf, ok := ret.Get(0).(func() *hw04lrucache.ListItem); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hw04lrucache.ListItem)
		}
	}

	return r0
}

// Front provides a mock function with given fields:
func (_m *List) Front() *hw04lrucache.ListItem {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Front")
	}

	var r0 *hw04lrucache.ListItem
	if rf, ok := ret.Get(0).(func() *hw04lrucache.ListItem); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hw04lrucache.ListItem)
		}
	}

	return r0
}

// Len provides a mock function with given fields:
func (_m *List) Len() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MoveToFront provides a mock function with given fields: i
func (_m *List) MoveToFront(i *hw04lrucache.ListItem) {
	_m.Called(i)
}

// PushBack provides a mock function with given fields: v
func (_m *List) PushBack(v interface{}) *hw04lrucache.ListItem {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for PushBack")
	}

	var r0 *hw04lrucache.ListItem
	if rf, ok := ret.Get(0).(func(interface{}) *hw04lrucache.ListItem); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hw04lrucache.ListItem)
		}
	}

	return r0
}

// PushFront provides a mock function with given fields: v
func (_m *List) PushFront(v interface{}) *hw04lrucache.ListItem {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for PushFront")
	}

	var r0 *hw04lrucache.ListItem
	if rf, ok := ret.Get(0).(func(interface{}) *hw04lrucache.ListItem); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hw04lrucache.ListItem)
		}
	}

	return r0
}

// Remove provides a mock function with given fields: i
func (_m *List) Remove(i *hw04lrucache.ListItem) {
	_m.Called(i)
}

// NewList creates a new instance of List. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewList(t interface {
	mock.TestingT
	Cleanup(func())
}) *List {
	mock := &List{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
